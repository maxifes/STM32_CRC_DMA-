
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00010464  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  08000464  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010464  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001d2  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000013b  00000000  00000000  00010666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000107a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00010820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001103  00000000  00000000  00010880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000561  00000000  00000000  00011983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000044d1  00000000  00000000  00011ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000163b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000138  00000000  00000000  00016408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000444 	.word	0x08000444

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000444 	.word	0x08000444

080001e8 <main>:
void DMA_Init();
void DMA_Enable();


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
    CRC_Enable();
 80001ee:	f000 f8ad 	bl	800034c <CRC_Enable>
    DMA_Init();
 80001f2:	f000 f82b 	bl	800024c <DMA_Init>
    DMA_Enable();
 80001f6:	f000 f811 	bl	800021c <DMA_Enable>

    for(int i = 0; i< NUM_WORDS; i++){
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e007      	b.n	8000210 <main+0x28>
    	source[i] = i;
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4905      	ldr	r1, [pc, #20]	; (8000218 <main+0x30>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i< NUM_WORDS; i++){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3301      	adds	r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b02      	cmp	r3, #2
 8000214:	ddf4      	ble.n	8000200 <main+0x18>
    	//CRC_Acummulate(source[i]);
    }

	while(1){}
 8000216:	e7fe      	b.n	8000216 <main+0x2e>
 8000218:	2000001c 	.word	0x2000001c

0800021c <DMA_Enable>:
}

void DMA_Enable(void){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	DMA2_S0CR |= BIT_0;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <DMA_Enable+0x2c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <DMA_Enable+0x2c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
	while((DMA2_S0CR & BIT_0)== 0x0){} //Espera a que el bit se ponga en 1
 800022c:	bf00      	nop
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <DMA_Enable+0x2c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <DMA_Enable+0x12>
}
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40026410 	.word	0x40026410

0800024c <DMA_Init>:

void DMA_Init(void){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= BIT_22; //activa reloj para DMA2
 8000252:	4b35      	ldr	r3, [pc, #212]	; (8000328 <DMA_Init+0xdc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a34      	ldr	r2, [pc, #208]	; (8000328 <DMA_Init+0xdc>)
 8000258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800025c:	6013      	str	r3, [r2, #0]
    for(int i = 0; i<100;i++){}
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e002      	b.n	800026a <DMA_Init+0x1e>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3301      	adds	r3, #1
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b63      	cmp	r3, #99	; 0x63
 800026e:	ddf9      	ble.n	8000264 <DMA_Init+0x18>

    DMA2_S0CR &= ~BIT_0; //Deshabilita DMA
 8000270:	4b2e      	ldr	r3, [pc, #184]	; (800032c <DMA_Init+0xe0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a2d      	ldr	r2, [pc, #180]	; (800032c <DMA_Init+0xe0>)
 8000276:	f023 0301 	bic.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]
    while((DMA2_S0CR & BIT_0)== 0x1){} //Espera a que el bit se ponga en 0
 800027c:	bf00      	nop
 800027e:	4b2b      	ldr	r3, [pc, #172]	; (800032c <DMA_Init+0xe0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	2b01      	cmp	r3, #1
 8000288:	d0f9      	beq.n	800027e <DMA_Init+0x32>

	DMA_HIFCR = 0xFFFFFFFF; //Limpia banderas de interrupcion
 800028a:	4b29      	ldr	r3, [pc, #164]	; (8000330 <DMA_Init+0xe4>)
 800028c:	f04f 32ff 	mov.w	r2, #4294967295
 8000290:	601a      	str	r2, [r3, #0]
	DMA_LIFCR = 0xFFFFFFFF; //Limpia banderas de interrupcion
 8000292:	4b28      	ldr	r3, [pc, #160]	; (8000334 <DMA_Init+0xe8>)
 8000294:	f04f 32ff 	mov.w	r2, #4294967295
 8000298:	601a      	str	r2, [r3, #0]

    DMA2_S0CR |= BIT_7; //Habilita Memory to memory
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <DMA_Init+0xe0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <DMA_Init+0xe0>)
 80002a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a4:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |=  BIT_12; //Source data size (Full word)- Peripheral Data Size
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <DMA_Init+0xe0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a20      	ldr	r2, [pc, #128]	; (800032c <DMA_Init+0xe0>)
 80002ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b0:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |= BIT_14; //Destination data size (Full word) - Memory Data Size
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <DMA_Init+0xe0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a1d      	ldr	r2, [pc, #116]	; (800032c <DMA_Init+0xe0>)
 80002b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002bc:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |= BIT_9; //PINC Habilita incrementar el puntero del source despues de cada transaccion.
 80002be:	4b1b      	ldr	r3, [pc, #108]	; (800032c <DMA_Init+0xe0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a1a      	ldr	r2, [pc, #104]	; (800032c <DMA_Init+0xe0>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
	//DMA2_S0CR |= BIT_10; //MINC habilita incrementar el puntero del destination
	DMA2_S0M0AR = (uint32_t)(CRC_DR_ADDRESS); //destination
 80002ca:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <DMA_Init+0xec>)
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <DMA_Init+0xf0>)
 80002ce:	601a      	str	r2, [r3, #0]
	DMA2_S0PAR = (uint32_t)(FLASH_START_ADDRESS); //source
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <DMA_Init+0xf4>)
 80002d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002d6:	601a      	str	r2, [r3, #0]
	DMA2_S0NDTR = NUM_WORDS;
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <DMA_Init+0xf8>)
 80002da:	2203      	movs	r2, #3
 80002dc:	601a      	str	r2, [r3, #0]

	DMA2_S0FCR |= BIT_2;//Habilitar FIFO
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <DMA_Init+0xfc>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a19      	ldr	r2, [pc, #100]	; (8000348 <DMA_Init+0xfc>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6013      	str	r3, [r2, #0]
	DMA2_S0FCR |= 0x03;//BIT_1 | BIT_0; //Threshold level: Full FIFO
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <DMA_Init+0xfc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a16      	ldr	r2, [pc, #88]	; (8000348 <DMA_Init+0xfc>)
 80002f0:	f043 0303 	orr.w	r3, r3, #3
 80002f4:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |= BIT_21; //PBURST: INCR4
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <DMA_Init+0xe0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0c      	ldr	r2, [pc, #48]	; (800032c <DMA_Init+0xe0>)
 80002fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000300:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |= BIT_23; //MBURST: INCR4
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <DMA_Init+0xe0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a09      	ldr	r2, [pc, #36]	; (800032c <DMA_Init+0xe0>)
 8000308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800030c:	6013      	str	r3, [r2, #0]

	DMA2_S0CR |= BIT_4; //Habilita interrupcion de transaccion completa.
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <DMA_Init+0xe0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a06      	ldr	r2, [pc, #24]	; (800032c <DMA_Init+0xe0>)
 8000314:	f043 0310 	orr.w	r3, r3, #16
 8000318:	6013      	str	r3, [r2, #0]
	//DMA2_S0CR |= BIT_0; //Habilita DMA
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40023830 	.word	0x40023830
 800032c:	40026410 	.word	0x40026410
 8000330:	4002640c 	.word	0x4002640c
 8000334:	40026408 	.word	0x40026408
 8000338:	4002641c 	.word	0x4002641c
 800033c:	40023000 	.word	0x40023000
 8000340:	40026418 	.word	0x40026418
 8000344:	40026414 	.word	0x40026414
 8000348:	40026424 	.word	0x40026424

0800034c <CRC_Enable>:

void CRC_Enable(){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
	int i = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
	RCC_AHB1ENR |= BIT_12; //Activa reloj para CRC
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <CRC_Enable+0x38>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <CRC_Enable+0x38>)
 800035c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000360:	6013      	str	r3, [r2, #0]
	for (i = 0; i < 1000; i++){}; //Espera a que el reloj se estabilice
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	e002      	b.n	800036e <CRC_Enable+0x22>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3301      	adds	r3, #1
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000374:	dbf8      	blt.n	8000368 <CRC_Enable+0x1c>
	CRC_Restart();
 8000376:	f000 f807 	bl	8000388 <CRC_Restart>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40023830 	.word	0x40023830

08000388 <CRC_Restart>:

void CRC_Restart(void){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	CRC_CR |= BIT_0;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <CRC_Restart+0x1c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <CRC_Restart+0x1c>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023008 	.word	0x40023008

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	; (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 f811 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ff05 	bl	80001e8 <main>

080003de <LoopForever>:

LoopForever:
  b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ec:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f4:	20000028 	.word	0x20000028

080003f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	; (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	; (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	; (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	; (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
